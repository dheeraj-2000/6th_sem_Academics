library(reshape)
install.packages("Metrics")
install.packages("forecast")
library(ggplot2)
library(Metrics)
library(forecast)
library(reshape)
install.packages("reshape")
library(reshape)
library(forecast)
data("sunspot.month")
sunspot.month
#start end time frequency cycle - The deltat() function returns the fixed time interval between observations and the frequency() function returns the number of observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation
start(UKDriverDeaths)
end(UKDriverDeaths)
end(sunspot.month)
time(sunspot.month)
cycle(sunspot.month)
deltat(sunspot.month)
#start end time frequency cycle - The deltat() function returns the fixed time interval between observations and the frequency() function returns the number of observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation
start(sunspot.month)
end(sunspot.month)
time(sunspot.month)
cycle(sunspot.month)
deltat(sunspot.month)
data("UKDriverDeaths")
UKDriverDeaths
#start end time frequency cycle - The deltat() function returns the fixed time interval between observations and the frequency() function returns the number of observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation
start(UKDriverDeaths)
end(UKDriverDeaths)
time(UKDriverDeaths)
cycle(UKDriverDeaths)
cycle(sunspot.month)
deltat(UKDriverDeaths)
deltat(sunspot.month)
#start end time frequency cycle - The deltat() function returns the fixed time interval between observations and the frequency() function returns the number of observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation
start(sunspot.month)
end(sunspot.month)
time(sunspot.month)
cycle(sunspot.month)
deltat(sunspot.month)
time_series <- ts(sunspot.month, start=1749 ,frequency = 12)
time_series <- ts(sunspot.month, start=1749 ,frequency = 12)
time_series
is.ts(time_series)
time_series <- ts(UKDriverDeaths, start=1969 ,frequency = 12)
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="UK_DRIVER_DEATHS",ylab ="Deaths")
abline(reg = lm(time_series~time(time_series)),col="green")
UKDriverDeaths
ts.plot(time_series, main="Sunspot",ylab ="Deaths")
abline(reg = lm(time_series~time(time_series)),col="green")
time_series <- ts(sunspot.month, start=1749 ,frequency = 12)
time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Deaths")
abline(reg = lm(time_series~time(time_series)),col="green")
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
linear_growth <- log(time_series)
time_series <- ts(UKDriverDeaths, start=1969 ,frequency = 12)
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="UK_DRIVER_DEATHS",ylab ="Deaths")
abline(reg = lm(time_series~time(time_series)),col="green")
linear_growth <- log(time_series)
ts.plot(linear_growth)
plot(aggregate(time_series,FUN = mean))
time_series <- ts(sunspot.month, start=1749 ,frequency = 12)
#time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
time_series <- ts(sunspot.month, start=1749 ,frequency = 12)
#time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
time_series <- ts(sunspot.month, start=1749 ,frequency = 12)
#time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
abline(reg = lm(time_series~time(time_series)),col="green")
plot(aggregate(time_series,FUN = mean))
boxplot(time_series~cycle(time_series),xlab="Month",ylab = "Sunspot Number",main = "Sunspot")
time_series <- ts(UKDriverDeaths, start=1969 ,frequency = 12)
#check whether it is a ts object
is.ts(time_series)
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
time_series <- ts(sunspot.month, start=1749 ,frequency = 12)
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
s.window
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
stlts$trend <- stlts$time.series[,1]
plot(stlts$trend)
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
time_series <- ts(sunspot.month, start=1749 ,frequency = 12)
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,1]
plot(stlts$trend)
stlts$trend <- stlts$time.series[,3]
plot(stlts$trend)
plot(aggregate(time_series,FUN = mean))
boxplot(time_series~cycle(time_series),xlab="Month",ylab = "Sunspot Number",main = "Sunspot")
time_series <- ts(UKDriverDeaths, start=1969 ,frequency = 12)
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="UK_DRIVER_DEATHS",ylab ="Deaths")
abline(reg = lm(time_series~time(time_series)),col="green")
linear_growth <- log(time_series)
ts.plot(linear_growth)
plot(aggregate(time_series,FUN = mean))
data()
data("UKDriverDeaths")
UKDriverDeaths
time_series <- ts(sunspot.month, start=1749 ,frequency = 12)
plot(aggregate(time_series,FUN = mean))
time_series <- ts(UKLungDeaths, start=1749 ,frequency = 12)
data("UKLungDeaths")
UKLungDeaths
UKLungDeaths
data("fdeaths")
fdeaths
data("fdeaths")
fdeaths
data("fdeaths (UKLungDeaths)      ")
fdeaths (UKLungDeaths)
data("UKLungDeaths")
UKLungDeaths
data("ldeaths")
ldeaths
time_series <- ts(ldeaths, start=1749 ,frequency = 12)
time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
plot(aggregate(time_series,FUN = mean))
boxplot(time_series~cycle(time_series),xlab="Month",ylab = "Sunspot Number",main = "Sunspot")
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,3]
plot(stlts$trend)
data()
time_series <- ts(UKDriverDeaths, start=1969 ,frequency = 12)
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="UK_DRIVER_DEATHS",ylab ="Deaths")
abline(reg = lm(time_series~time(time_series)),col="green")
linear_growth <- log(time_series)
ts.plot(linear_growth)
plot(aggregate(time_series,FUN = mean))
boxplot(time_series~cycle(time_series),xlab="Month",ylab = "Death",main = "Monthly UK Driver Deaths")
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
time_series <- ts(ldeaths, start=1749 ,frequency = 12)
time_series
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,3]
plot(stlts$trend)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
time_series <- ts(ldeaths, start=1749 ,frequency = 12)
time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
data("mdeaths")
mdeaths
time_series <- ts(mdeaths, start=1749 ,frequency = 12)
time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
plot(aggregate(time_series,FUN = mean))
boxplot(time_series~cycle(time_series),xlab="Month",ylab = "Sunspot Number",main = "Sunspot")
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
data("mdeaths")
mdeaths
sunspots")
sunspot
data("sunspots")
data("sunspots")
sunspots
#start end time frequency cycle - The deltat() function returns the fixed time interval between observations and the frequency() function returns the number of observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation
start(sunspot.month)
end(sunspot.month)
time(sunspot.month)
cycle(sunspot.month)
deltat(sunspot.month)
time_series <- ts(mdeaths, start=1749 ,frequency = 12)
time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
plot(aggregate(time_series,FUN = mean))
boxplot(time_series~cycle(time_series),xlab="Month",ylab = "Sunspot Number",main = "Sunspot")
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
time_series <- ts(sunspots, start=1749 ,frequency = 12)
time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
plot(aggregate(time_series,FUN = mean))
boxplot(time_series~cycle(time_series),xlab="Month",ylab = "Sunspot Number",main = "Sunspot")
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
data("mdeaths")
mdeaths
time_series <- ts(mdeaths, start=1974 ,frequency = 12)
time_series
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series~time(time_series)),col="green")
plot(aggregate(time_series,FUN = mean))
boxplot(time_series~cycle(time_series),xlab="Month",ylab = "Sunspot Number",main = "Sunspot")
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
time_series <- ts(UKDriverDeaths, start=1969 ,frequency = 12)
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="UK_DRIVER_DEATHS",ylab ="Deaths")
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
data("UKDriverDeaths")
UKDriverDeaths
time_series <- ts(UKDriverDeaths, start=1969 ,frequency = 12)
#check whether it is a ts object
is.ts(time_series)
ts.plot(time_series, main="UK_DRIVER_DEATHS",ylab ="Deaths")
abline(reg = lm(time_series~time(time_series)),col="green")
linear_growth <- log(time_series)
ts.plot(linear_growth)
plot(aggregate(time_series,FUN = mean))
boxplot(time_series~cycle(time_series),xlab="Month",ylab = "Death",main = "Monthly UK Driver Deaths")
stlts <- stl(time_series, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
time_series1 <- ts(mdeaths, start=1974 ,frequency = 12)
time_series1
#check whether it is a ts object
is.ts(time_series1)
ts.plot(time_series1, main="Sunspot",ylab ="Monthly Total mean Sunspot number")
abline(reg = lm(time_series1~time(time_series)1),col="green")
plot(aggregate(time_series1,FUN = mean))
boxplot(time_series1~cycle(time_series1),xlab="Month",ylab = "Sunspot Number",main = "Sunspot")
stlts <- stl(time_series1, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
library(ggplot2)
library(Metrics)
library(forecast)
library(reshape)
data("mdeaths")
mdeaths
#start end time frequency cycle - The deltat() function returns the fixed time interval between observations and the frequency() function returns the number of observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation
start(mdeaths)
end(mdeaths)
time(mdeaths)
cycle(mdeaths)
deltat(mdeaths)
time_series1 <- ts(mdeaths, start=1974 ,frequency = 12)
time_series1
#check whether it is a ts object
is.ts(time_series1)
ts.plot(time_series1, main="Deaths From lung disease",ylab ="Monthly Total mean Deaths")
abline(reg = lm(time_series1~time(time_series)1),col="green")
abline(reg = lm(time_series1~time(time_series1)1),col="green")
abline(reg = lm(time_series1~time(time_series1)),col="green")
plot(aggregate(time_series1,FUN = mean))
ts.plot(time_series1, main="Deaths From lung disease",ylab ="Monthly Total mean Deaths")
abline(reg = lm(time_series1~time(time_series1)),col="green")
plot(aggregate(time_series1,FUN = mean))
boxplot(time_series1~cycle(time_series1),xlab="Month",ylab = "Deaths",main = "Death from lung disease")
stlts <- stl(time_series1, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
stlts$residue <- (time_series -(stlts$trend + stlts$seasona))
plot(stlts$residue,main = "Residue after removing trend and seasonality",col = "blue")
me_series1 <- ts(mdeaths, start=1974 ,frequency = 12)
time_series1
#check whether it is a ts object
is.ts(time_series1)
ts.plot(time_series1, main="Deaths From lung disease",ylab ="Monthly Total mean Deaths")
abline(reg = lm(time_series1~time(time_series1)),col="green")
#This property can stabilize variability when a series exhibits increasing variability over time. It may also be used to linearize a rapid growth pattern over time
#Q3  -  Monthly mean values
plot(aggregate(time_series1,FUN = mean))
#Q4 -  Boxplot Monthly
boxplot(time_series1~cycle(time_series1),xlab="Month",ylab = "Deaths",main = "Death from lung disease")
#Q5 - decompose using stl and find TREND
stlts <- stl(time_series1, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
# Trend is downward
# Q6  - Seasonality
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
# Yearly  quite uniform patterns
me_series1 <- ts(mdeaths, start=1974 ,frequency = 12)
time_series1
#check whether it is a ts object
is.ts(time_series1)
ts.plot(time_series1, main="Deaths From lung disease",ylab ="Monthly Total mean Deaths")
abline(reg = lm(time_series1~time(time_series1)),col="green")
#This property can stabilize variability when a series exhibits increasing variability over time. It may also be used to linearize a rapid growth pattern over time
#Q3  -  Monthly mean values
plot(aggregate(time_series1,FUN = mean))
#Q4 -  Boxplot Monthly
boxplot(time_series1~cycle(time_series1),xlab="Month",ylab = "Deaths",main = "Death from lung disease")
#Q5 - decompose using stl and find TREND
stlts <- stl(time_series1, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
# Trend is downward
# Q6  - Seasonality
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
# Yearly  quite uniform patterns
stlts$residue <- (time_series1 -(stlts$trend + stlts$seasona))
plot(stlts$residue,main = "Residue after removing trend and seasonality",col = "blue")
train <- window(mdeaths,start = c(1974,1) ,end=c(1979,12))
train
train <- window(mdeaths,start = c(1974,1) ,end=c(1978,6))
train
# here train data for 75% and test is 25% that is 48 months , fchw is prediction , summary give whole detail about model ,rms values ,traindata ,testdata ,alpha,beta,gammavalues
fchw <- hw(train, seasonal = "additive", h = 18)
summary(fchw)
install.packages("forecast")
library(reshape)
library(forecast)
install.packages("forecast")
install.packages("forecast", repos="http://cran.us.r-project.org")
library(forecast)
install.packages("forecast", repos="http://cran.us.r-project.org")
library(forecast)
rmse(df$Point.Forecast,df$tail.time_series..18.)
hw_modelt <- HoltWinters(train,alpha = "0.22" ,beta = "0.32" ,gamma = "0.82" )
model.predict <- predict(hw_modelt,n.ahead = 48)
round(model.predict)
hw_modelt <- HoltWinters(train,alpha = "0.22" ,beta = "0.32" ,gamma = "0.82" )
model.predict <- predict(hw_modelt,n.ahead = 18)
round(model.predict)
p_values= model.predict
act_value = tail(time_series1,18)
rmse(act_value,p_values)
time_series <- ts(UKDriverDeaths, start=1969 ,frequency = 12)
#check whether it is a ts object
is.ts(time_series)
train <- window(UKDriverDeaths,start = c(1969,1) ,end=c(1980,12))
train
# here train data for 75% and test is 25% that is 48 months , fchw is prediction , summary give whole detail about model ,rms values ,traindata ,testdata ,alpha,beta,gammavalues
fchw <- hw(train, seasonal = "additive", h = 48)
summary(fchw)
autoplot(fchw)
act_value = tail(time_series,48)
df = data.frame( fchw , tail(time_series,48))
X = time(act_value)
dfplt = as.data.frame(data.frame(df$Point.Forecast,df$tail.time_series..48.))
ggplot(dfplt,aes(X))+
geom_line(aes(y=dfplt$df.Point.Forecast),colour = "blue")+
geom_line(aes(y=dfplt$df.tail.time_series..48.),colour = "black") + xlab("Time") + ylab("Deaths") +
ggtitle("Predicted(blue) and actual (black) values graph")
rmse(df$Point.Forecast,df$tail.time_series..48.)
hw_modelt <- HoltWinters(train,alpha = "0.22" ,beta = "0.32" ,gamma = "0.82" )
model.predict <- predict(hw_modelt,n.ahead = 48)
round(model.predict)
p_values= model.predict
act_value = tail(time_series,48)
rmse(act_value,p_values)
train <- window(UKDriverDeaths,start = c(1969,1) ,end=c(1980,12))
train
model = auto.arima(train)
model
# Q14 - Predict for next 25% data
p <- forecast(model, h = 48)
p
plot(UKDriverDeaths)
plot(p)
predicted = data.frame(p)
arima_act_values = tail(time_series,48)
#Q15 Plotting predicted and actual
X = time(arima_act_values)
arima_df <- as.data.frame(data.frame(X,predicted$Point.Forecast,arima_act_values))
ggplot(arima_df,aes(X))+
geom_line(aes(y=predicted$Point.Forecast),colour="blue")+
geom_line(aes(y=arima_act_values),colour = "black") + xlab("Time") + ylab("Deaths")+
ggtitle("Predicted(blue) and actual (black) values graph")
#start end time frequency cycle - The deltat() function returns the fixed time interval between observations and the frequency() function returns the number of observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation
start(mdeaths)
end(mdeaths)
time(mdeaths)
cycle(mdeaths)
deltat(mdeaths)
data("mdeaths")
mdeaths
#start end time frequency cycle - The deltat() function returns the fixed time interval between observations and the frequency() function returns the number of observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation
start(mdeaths)
end(mdeaths)
time_series1
is.ts(time_series1)
ts.plot(time_series1, main="Deaths From lung disease",ylab ="Monthly Total mean Deaths")
abline(reg = lm(time_series1~time(time_series1)),col="green")
ts.plot(time_series1, main="Deaths From lung disease",ylab ="Monthly Total mean Deaths")
time_series1 <- ts(mdeaths, start=1974 ,frequency = 12)
time_series1
#check whether it is a ts object
is.ts(time_series1)
ts.plot(time_series1, main="Deaths From lung disease",ylab ="Monthly Total mean Deaths")
abline(reg = lm(time_series1~time(time_series1)),col="green")
plot(aggregate(time_series1,FUN = mean))
boxplot(time_series1~cycle(time_series1),xlab="Month",ylab = "Deaths",main = "Death from lung disease")
stlts <- stl(time_series1, s.window = "periodic")
plot(stlts)
plot(stlts$trend)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
plot(stlts$seasonal)
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
stlts$residue <- (time_series1 -(stlts$trend + stlts$seasona))
plot(stlts$residue,main = "Residue after removing trend and seasonality",col = "blue")
plot(stlts$residue,main = "Residue after removing trend and seasonality",col = "pink")
plot(stlts$residue,main = "Residue after removing trend and seasonality",col = "green")
time_series <- ts(sunspot.month, start=1974 ,frequency = 12)
time_series1
plot(aggregate(time_series1,FUN = mean))
boxplot(time_series1~cycle(time_series1),xlab="Month",ylab = "Deaths",main = "Death from lung disease")
stlts <- stl(time_series1, s.window = "periodic")
plot(stlts)
stlts$trend <- stlts$time.series[,2]
plot(stlts$trend)
stlts$seasonal <- stlts$time.series[,1]
stlts$residue <- (time_series1 -(stlts$trend + stlts$seasona))
plot(stlts$residue,main = "Residue after removing trend and seasonality",col = "blue")
# Cleaning data
tscl <- tsclean(time_series1)
modelcl <- HoltWinters(tscl)
model_without_cleaning <- HoltWinters(time_series1)
plot(model_without_cleaning, main = "Original with Fitted time series : Raw Data")
plot(modelcl, main = "Original with Fitted time series : Cleaned Data")
modelcl$SSE
model_without_cleaning$SSE
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
plot(time_series1)
time_series <- ts(sunspot.month, start=1974 ,frequency = 12)
time_series1
plot(time_series1)
data("sunspot.month")
sunspot.month
time_series <- ts(sunspot.month, start=1974 ,frequency = 12)
time_series1
time_series1 <- ts(sunspot.month, start=1974 ,frequency = 12)
time_series1
plot(time_series1)
plot(aggregate(time_series1,FUN = mean))
boxplot(time_series1~cycle(time_series1),xlab="Month",ylab = "Deaths",main = "Death from lung disease")
plot(aggregate(time_series1,FUN = mean))
boxplot(time_series1~cycle(time_series1),xlab="Month",ylab = "Deaths",main = "Death from lung disease")
stlts <- stl(time_series1, s.window = "periodic")
plot(stlts)
stlts$seasonal <- stlts$time.series[,1]
plot(stlts$seasonal)
